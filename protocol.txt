When a packet is spawned at a router:
    1.) The router has a known route to the destination:
        - Set ROUTE_REQUEST to FALSE
        - Set PATH_KNOWN to TRUE
        - Randomly choose from known paths and add path to packet. Forward to next router
    2.) The router does not have a known router to the destination:
        - Set ROUTE_REQUEST to TRUE
        - Set PATH_KNOWN to FALSE
        - Forward to all immediately adjacent routers

When a packet is received at a router that is not the destination:
    1.) ROUTE_REQUEST = TRUE, PATH_KNOWN = TRUE:
        - Throw an error. This should not happen
    2.) ROUTE_REQUEST = TRUE, PATH_KNOWN = FALSE:
        - Check if the current router knows a path to the destination:
            If the current router knows a path to the destination:
                - Set ROUTE_REQUEST to FALSE
                - Set PATH_KNOWN to TRUE
                - Add path to packet. Forward to next router
                - Create new packet to send to the original source router:
                    - Set ROUTE_REQUEST to FALSE
                    - Set PATH_KNOWN to TRUE
                    - Set path to the known path to destination and the path so far traveled and send back to original source
            If the current router does not know a path to destination:
                - Append current rtouer information
                - Forward to all immediately adjacent routers.
    3.) ROUTE_REQUEST = FALSE, PATH_KNOWN = TRUE:
        - Forward to next router
    4.) ROUTE_REQUEST = FALSE, PATH_KNOWN = FALSE:
        - Throw an error. This should not happen

When a packet is received at a destination router:
    1.) ROUTE_REQUEST = TRUE, PATH_KNOWN = TRUE:
        - Throw an error. This should not happen
    2.) ROUTE_REQUEST = TRUE, PATH_KNOWN = FALSE:
        - Create new packet to send to original source router:
            - Set ROUTE_REQUEST = FALSE
            - Set PATH_KNOWN = TRUE
            - Set path to the backwards of the path of the packet just received
        - Add packet to completed queue.
    3.) ROUTE_REQUEST = FALSE, PATH_KNOWN = TRUE:
        - Add packet to completed queue.
    4.) ROUTE_REQUEST = FALSE, PATH_KNOWN = FALSE:
        - Thrown an error. This should not happen

General Notes:
    - It is possible, and likely, that a packet at any given point, or at its destination, will have a hop count differing from its path information.
        This happens because path information can be treated as either directions, travel history, or both, depending on the settings of flags.
            
Learning Paths:
    - A router should take any received packets and attempt to learn as many new paths as possible from it
    - A router should maintain the shortest n unique paths to any destination
    - While learning paths, a router should check if there are n paths held
        - If there are not n paths held, then the router should add the new path assuming it is unique if another path is already held
        - If there are n paths held, the router should check the length of both. If the new path is shorter than one of the paths, it should be replaced with the new path

Packet Types Flags
    ROUTE_REQUEST - If TRUE, the destination router should send a packet back to the source upon receipt. The path will be known since the destination router has received the packet
    PATH_KNOWN - If TRUE, the router should not broadcast the packet to neighbors. Instead, it should simply forward packet to the next router indicated in the known path.
               - If FALSE, the router should check if it knows a path to the destination. If it does, it should randomly choose from any paths it knows and add that path to the packet.
                 If it adds a path to the packet, then it should set this flag to TRUE and forward to the next router in the path. Otherwise, broadcast this packet to all neighbors.

What does a packet consist of?
    Flags:
        - ROUTE_REQUEST: T/F -> See protocol for usage
        - PATH_KNOWN: T/F -> See protocol for usage
    Information:
        - Path Information: List of path information
        - Place in path: This should be set to either:
            a.) The current number of nodes in the list - 1 (Path not known)
            b.) The index of the last visited node in the list (Path known)
        - Source: String name of source router
        - Destination: String name of destination router
        - ID: integer packet id number
    Tracking Information:
        - Creation Time: Time in simulation that the packet was created
        - Arrival Time: Time that packet reached the destination node
        - Hop Count: Number of visited routers

What does a router consist of?
    Information:
        - ID: A string for the name of the router
        - Energy Level: A interger representing the amount of energy left in the router
        - Immediate Neighbors: A list of strings of the names of the immediately adjacent neighbors of the router
    Data:
        - Path Tables: A list of dictionaries that hold the paths that the router has learned
        - Buffer Queue: A list being used as a queue for the packets that the router has received and not yet processed
        - Finished Queue: A place for the router to put packets that it is the receipent of once received until they can be analyzed for sim info later
        